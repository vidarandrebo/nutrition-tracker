@using System.Linq.Expressions
@using Microsoft.Extensions.Logging
@typeparam TValue
@inject ILogger<InputNumberPrimary<TValue>> Logger
<InputNumber @bind-Value="Value" class="form-control" @attributes="AdditionalAttributes"></InputNumber>

@code {

    private TValue _value;

    [Parameter]
    public TValue Value
    {
        get { return _value; }
        set
        {
            if (AdditionalAttributes is not null)
            {
                foreach (var item in AdditionalAttributes)
                {
                    Logger.LogInformation("{key} {value}", item.Key, item.Value);
                }
            }


            if (!EqualityComparer<TValue>.Default.Equals(_value, value))
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

}