//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// FoodItemResponse defines model for FoodItemResponse.
type FoodItemResponse struct {
	Carbohydrate *float64 `json:"carbohydrate,omitempty"`
	Fat          *float64 `json:"fat,omitempty"`
	Id           *int64   `json:"id,omitempty"`
	KCal         *float64 `json:"kCal,omitempty"`
	Manufacturer *string  `json:"manufacturer,omitempty"`
	Product      *string  `json:"product,omitempty"`
	Protein      *float64 `json:"protein,omitempty"`
	Public       *bool    `json:"public,omitempty"`
	Source       *string  `json:"source,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest = WithCredentials

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// MealEntryResponse defines model for MealEntryResponse.
type MealEntryResponse struct {
	Amount     *float64 `json:"amount,omitempty"`
	FoodItemId *int64   `json:"foodItemId,omitempty"`
	Id         *int64   `json:"id,omitempty"`
	RecipeId   *int64   `json:"recipeId,omitempty"`
}

// MealResponse defines model for MealResponse.
type MealResponse struct {
	Entries        *[]MealEntryResponse `json:"entries,omitempty"`
	Id             *int64               `json:"id,omitempty"`
	SequenceNumber *int64               `json:"sequenceNumber,omitempty"`
	Timestamp      *time.Time           `json:"timestamp,omitempty"`
}

// PostFoodItemRequest defines model for PostFoodItemRequest.
type PostFoodItemRequest struct {
	Carbohydrate *float64 `json:"carbohydrate,omitempty"`
	Fat          *float64 `json:"fat,omitempty"`
	Id           *int64   `json:"id,omitempty"`
	KCal         *float64 `json:"kCal,omitempty"`
	Manufacturer *string  `json:"manufacturer,omitempty"`
	Product      *string  `json:"product,omitempty"`
	Protein      *float64 `json:"protein,omitempty"`
	Public       *bool    `json:"public,omitempty"`
}

// PostMealEntryRequest defines model for PostMealEntryRequest.
type PostMealEntryRequest struct {
	Amount     *float64 `json:"amount,omitempty"`
	FoodItemId *int64   `json:"foodItemId,omitempty"`
	RecipeId   *int64   `json:"recipeId,omitempty"`
}

// PostMealRequest defines model for PostMealRequest.
type PostMealRequest = WithTimestamp

// PostRecipeEntryRequest defines model for PostRecipeEntryRequest.
type PostRecipeEntryRequest struct {
	Amount     *float64 `json:"amount,omitempty"`
	FoodItemId *int64   `json:"foodItemId,omitempty"`
}

// PostRecipeRequest defines model for PostRecipeRequest.
type PostRecipeRequest struct {
	Entries *[]PostRecipeEntryRequest `json:"entries,omitempty"`
	Name    *string                   `json:"name,omitempty"`
}

// RecipeEntryResponse defines model for RecipeEntryResponse.
type RecipeEntryResponse struct {
	Amount     *float64 `json:"amount,omitempty"`
	FoodItemId *int64   `json:"foodItemId,omitempty"`
	Id         *int64   `json:"id,omitempty"`
}

// RecipeResponse defines model for RecipeResponse.
type RecipeResponse struct {
	Entries *[]RecipeEntryResponse `json:"entries,omitempty"`
	Id      *int64                 `json:"id,omitempty"`
	Name    *string                `json:"name,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest = WithCredentials

// WithAmount defines model for WithAmount.
type WithAmount struct {
	Amount *float64 `json:"amount,omitempty"`
}

// WithCredentials defines model for WithCredentials.
type WithCredentials struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

// WithEnergy defines model for WithEnergy.
type WithEnergy struct {
	Carbohydrate *float64 `json:"carbohydrate,omitempty"`
	Fat          *float64 `json:"fat,omitempty"`
	KCal         *float64 `json:"kCal,omitempty"`
	Protein      *float64 `json:"protein,omitempty"`
}

// WithId defines model for WithId.
type WithId struct {
	Id *int64 `json:"id,omitempty"`
}

// WithMacronutrients defines model for WithMacronutrients.
type WithMacronutrients struct {
	Carbohydrate *float64 `json:"carbohydrate,omitempty"`
	Fat          *float64 `json:"fat,omitempty"`
	Protein      *float64 `json:"protein,omitempty"`
}

// WithTimestamp defines model for WithTimestamp.
type WithTimestamp struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// PostApiFoodItemsJSONBody defines parameters for PostApiFoodItems.
type PostApiFoodItemsJSONBody = PostFoodItemRequest

// GetApiMealsParams defines parameters for GetApiMeals.
type GetApiMealsParams struct {
	DateFrom *time.Time `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`
	DateTo   *time.Time `form:"dateTo,omitempty" json:"dateTo,omitempty"`
}

// PostApiFoodItemsJSONRequestBody defines body for PostApiFoodItems for application/json ContentType.
type PostApiFoodItemsJSONRequestBody = PostApiFoodItemsJSONBody

// PostApiLoginJSONRequestBody defines body for PostApiLogin for application/json ContentType.
type PostApiLoginJSONRequestBody = LoginRequest

// PostApiMealsJSONRequestBody defines body for PostApiMeals for application/json ContentType.
type PostApiMealsJSONRequestBody = PostMealRequest

// PostApiMealsIdEntriesJSONRequestBody defines body for PostApiMealsIdEntries for application/json ContentType.
type PostApiMealsIdEntriesJSONRequestBody = PostMealEntryRequest

// PostApiRecipesJSONRequestBody defines body for PostApiRecipes for application/json ContentType.
type PostApiRecipesJSONRequestBody = PostRecipeRequest

// PostApiRegisterJSONRequestBody defines body for PostApiRegister for application/json ContentType.
type PostApiRegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /api/food-items)
	GetApiFoodItems(w http.ResponseWriter, r *http.Request)

	// (POST /api/food-items)
	PostApiFoodItems(w http.ResponseWriter, r *http.Request)

	// (GET /api/food-items/{id})
	GetApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/login)
	PostApiLogin(w http.ResponseWriter, r *http.Request)

	// (GET /api/meals)
	GetApiMeals(w http.ResponseWriter, r *http.Request, params GetApiMealsParams)

	// (POST /api/meals)
	PostApiMeals(w http.ResponseWriter, r *http.Request)

	// (GET /api/meals/{id})
	GetApiMealsId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/meals/{id}/entries)
	PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /api/recipes)
	GetApiRecipes(w http.ResponseWriter, r *http.Request)

	// (POST /api/recipes)
	PostApiRecipes(w http.ResponseWriter, r *http.Request)

	// (POST /api/register)
	PostApiRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiFoodItems operation middleware
func (siw *ServerInterfaceWrapper) GetApiFoodItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiFoodItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiFoodItems operation middleware
func (siw *ServerInterfaceWrapper) PostApiFoodItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiFoodItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiFoodItemsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiFoodItemsId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiFoodItemsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiMeals operation middleware
func (siw *ServerInterfaceWrapper) GetApiMeals(w http.ResponseWriter, r *http.Request) {
	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiMealsParams

	// ------------- Optional query parameter "dateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateFrom", r.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateFrom", Err: err})
		return
	}

	// ------------- Optional query parameter "dateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateTo", r.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateTo", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiMeals(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiMeals operation middleware
func (siw *ServerInterfaceWrapper) PostApiMeals(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiMeals(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiMealsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiMealsId(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiMealsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiMealsIdEntries operation middleware
func (siw *ServerInterfaceWrapper) PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request) {
	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiMealsIdEntries(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetApiRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiRecipes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiRecipes operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/food-items", wrapper.GetApiFoodItems)
	m.HandleFunc("POST "+options.BaseURL+"/api/food-items", wrapper.PostApiFoodItems)
	m.HandleFunc("GET "+options.BaseURL+"/api/food-items/{id}", wrapper.GetApiFoodItemsId)
	m.HandleFunc("POST "+options.BaseURL+"/api/login", wrapper.PostApiLogin)
	m.HandleFunc("GET "+options.BaseURL+"/api/meals", wrapper.GetApiMeals)
	m.HandleFunc("POST "+options.BaseURL+"/api/meals", wrapper.PostApiMeals)
	m.HandleFunc("GET "+options.BaseURL+"/api/meals/{id}", wrapper.GetApiMealsId)
	m.HandleFunc("POST "+options.BaseURL+"/api/meals/{id}/entries", wrapper.PostApiMealsIdEntries)
	m.HandleFunc("GET "+options.BaseURL+"/api/recipes", wrapper.GetApiRecipes)
	m.HandleFunc("POST "+options.BaseURL+"/api/recipes", wrapper.PostApiRecipes)
	m.HandleFunc("POST "+options.BaseURL+"/api/register", wrapper.PostApiRegister)

	return m
}

type GetApiFoodItemsRequestObject struct{}

type GetApiFoodItemsResponseObject interface {
	VisitGetApiFoodItemsResponse(w http.ResponseWriter) error
}

type GetApiFoodItems200JSONResponse []FoodItemResponse

func (response GetApiFoodItems200JSONResponse) VisitGetApiFoodItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFoodItemsRequestObject struct {
	Body *PostApiFoodItemsJSONRequestBody
}

type PostApiFoodItemsResponseObject interface {
	VisitPostApiFoodItemsResponse(w http.ResponseWriter) error
}

type PostApiFoodItems201JSONResponse FoodItemResponse

func (response PostApiFoodItems201JSONResponse) VisitPostApiFoodItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetApiFoodItemsIdRequestObject struct {
	Id int64 `json:"id,omitempty"`
}

type GetApiFoodItemsIdResponseObject interface {
	VisitGetApiFoodItemsIdResponse(w http.ResponseWriter) error
}

type GetApiFoodItemsId200JSONResponse FoodItemResponse

func (response GetApiFoodItemsId200JSONResponse) VisitGetApiFoodItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiLoginRequestObject struct {
	Body *PostApiLoginJSONRequestBody
}

type PostApiLoginResponseObject interface {
	VisitPostApiLoginResponse(w http.ResponseWriter) error
}

type PostApiLogin200JSONResponse LoginResponse

func (response PostApiLogin200JSONResponse) VisitPostApiLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMealsRequestObject struct {
	Params GetApiMealsParams
}

type GetApiMealsResponseObject interface {
	VisitGetApiMealsResponse(w http.ResponseWriter) error
}

type GetApiMeals200JSONResponse []MealResponse

func (response GetApiMeals200JSONResponse) VisitGetApiMealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMealsRequestObject struct {
	Body *PostApiMealsJSONRequestBody
}

type PostApiMealsResponseObject interface {
	VisitPostApiMealsResponse(w http.ResponseWriter) error
}

type PostApiMeals201JSONResponse MealResponse

func (response PostApiMeals201JSONResponse) VisitPostApiMealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMealsIdRequestObject struct {
	Id int64 `json:"id,omitempty"`
}

type GetApiMealsIdResponseObject interface {
	VisitGetApiMealsIdResponse(w http.ResponseWriter) error
}

type GetApiMealsId200JSONResponse MealResponse

func (response GetApiMealsId200JSONResponse) VisitGetApiMealsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMealsIdEntriesRequestObject struct {
	Id   int64 `json:"id,omitempty"`
	Body *PostApiMealsIdEntriesJSONRequestBody
}

type PostApiMealsIdEntriesResponseObject interface {
	VisitPostApiMealsIdEntriesResponse(w http.ResponseWriter) error
}

type PostApiMealsIdEntries201JSONResponse MealEntryResponse

func (response PostApiMealsIdEntries201JSONResponse) VisitPostApiMealsIdEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetApiRecipesRequestObject struct{}

type GetApiRecipesResponseObject interface {
	VisitGetApiRecipesResponse(w http.ResponseWriter) error
}

type GetApiRecipes200JSONResponse []RecipeResponse

func (response GetApiRecipes200JSONResponse) VisitGetApiRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiRecipesRequestObject struct {
	Body *PostApiRecipesJSONRequestBody
}

type PostApiRecipesResponseObject interface {
	VisitPostApiRecipesResponse(w http.ResponseWriter) error
}

type PostApiRecipes201JSONResponse RecipeResponse

func (response PostApiRecipes201JSONResponse) VisitPostApiRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiRegisterRequestObject struct {
	Body *PostApiRegisterJSONRequestBody
}

type PostApiRegisterResponseObject interface {
	VisitPostApiRegisterResponse(w http.ResponseWriter) error
}

type PostApiRegister201Response struct{}

func (response PostApiRegister201Response) VisitPostApiRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// (GET /api/food-items)
	GetApiFoodItems(ctx context.Context, request GetApiFoodItemsRequestObject) (GetApiFoodItemsResponseObject, error)

	// (POST /api/food-items)
	PostApiFoodItems(ctx context.Context, request PostApiFoodItemsRequestObject) (PostApiFoodItemsResponseObject, error)

	// (GET /api/food-items/{id})
	GetApiFoodItemsId(ctx context.Context, request GetApiFoodItemsIdRequestObject) (GetApiFoodItemsIdResponseObject, error)

	// (POST /api/login)
	PostApiLogin(ctx context.Context, request PostApiLoginRequestObject) (PostApiLoginResponseObject, error)

	// (GET /api/meals)
	GetApiMeals(ctx context.Context, request GetApiMealsRequestObject) (GetApiMealsResponseObject, error)

	// (POST /api/meals)
	PostApiMeals(ctx context.Context, request PostApiMealsRequestObject) (PostApiMealsResponseObject, error)

	// (GET /api/meals/{id})
	GetApiMealsId(ctx context.Context, request GetApiMealsIdRequestObject) (GetApiMealsIdResponseObject, error)

	// (POST /api/meals/{id}/entries)
	PostApiMealsIdEntries(ctx context.Context, request PostApiMealsIdEntriesRequestObject) (PostApiMealsIdEntriesResponseObject, error)

	// (GET /api/recipes)
	GetApiRecipes(ctx context.Context, request GetApiRecipesRequestObject) (GetApiRecipesResponseObject, error)

	// (POST /api/recipes)
	PostApiRecipes(ctx context.Context, request PostApiRecipesRequestObject) (PostApiRecipesResponseObject, error)

	// (POST /api/register)
	PostApiRegister(ctx context.Context, request PostApiRegisterRequestObject) (PostApiRegisterResponseObject, error)
}

type (
	StrictHandlerFunc    = strictnethttp.StrictHTTPHandlerFunc
	StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc
)

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiFoodItems operation middleware
func (sh *strictHandler) GetApiFoodItems(w http.ResponseWriter, r *http.Request) {
	var request GetApiFoodItemsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFoodItems(ctx, request.(GetApiFoodItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFoodItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiFoodItemsResponseObject); ok {
		if err := validResponse.VisitGetApiFoodItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiFoodItems operation middleware
func (sh *strictHandler) PostApiFoodItems(w http.ResponseWriter, r *http.Request) {
	var request PostApiFoodItemsRequestObject

	var body PostApiFoodItemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiFoodItems(ctx, request.(PostApiFoodItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiFoodItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiFoodItemsResponseObject); ok {
		if err := validResponse.VisitPostApiFoodItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiFoodItemsId operation middleware
func (sh *strictHandler) GetApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetApiFoodItemsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFoodItemsId(ctx, request.(GetApiFoodItemsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFoodItemsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiFoodItemsIdResponseObject); ok {
		if err := validResponse.VisitGetApiFoodItemsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiLogin operation middleware
func (sh *strictHandler) PostApiLogin(w http.ResponseWriter, r *http.Request) {
	var request PostApiLoginRequestObject

	var body PostApiLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiLogin(ctx, request.(PostApiLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiLoginResponseObject); ok {
		if err := validResponse.VisitPostApiLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMeals operation middleware
func (sh *strictHandler) GetApiMeals(w http.ResponseWriter, r *http.Request, params GetApiMealsParams) {
	var request GetApiMealsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMeals(ctx, request.(GetApiMealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMeals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiMealsResponseObject); ok {
		if err := validResponse.VisitGetApiMealsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiMeals operation middleware
func (sh *strictHandler) PostApiMeals(w http.ResponseWriter, r *http.Request) {
	var request PostApiMealsRequestObject

	var body PostApiMealsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMeals(ctx, request.(PostApiMealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMeals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiMealsResponseObject); ok {
		if err := validResponse.VisitPostApiMealsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMealsId operation middleware
func (sh *strictHandler) GetApiMealsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetApiMealsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMealsId(ctx, request.(GetApiMealsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMealsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiMealsIdResponseObject); ok {
		if err := validResponse.VisitGetApiMealsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiMealsIdEntries operation middleware
func (sh *strictHandler) PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostApiMealsIdEntriesRequestObject

	request.Id = id

	var body PostApiMealsIdEntriesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMealsIdEntries(ctx, request.(PostApiMealsIdEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMealsIdEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiMealsIdEntriesResponseObject); ok {
		if err := validResponse.VisitPostApiMealsIdEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiRecipes operation middleware
func (sh *strictHandler) GetApiRecipes(w http.ResponseWriter, r *http.Request) {
	var request GetApiRecipesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiRecipes(ctx, request.(GetApiRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiRecipesResponseObject); ok {
		if err := validResponse.VisitGetApiRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiRecipes operation middleware
func (sh *strictHandler) PostApiRecipes(w http.ResponseWriter, r *http.Request) {
	var request PostApiRecipesRequestObject

	var body PostApiRecipesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiRecipes(ctx, request.(PostApiRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiRecipesResponseObject); ok {
		if err := validResponse.VisitPostApiRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiRegister operation middleware
func (sh *strictHandler) PostApiRegister(w http.ResponseWriter, r *http.Request) {
	var request PostApiRegisterRequestObject

	var body PostApiRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiRegister(ctx, request.(PostApiRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiRegisterResponseObject); ok {
		if err := validResponse.VisitPostApiRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
