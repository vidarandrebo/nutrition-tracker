//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// FoodItemResponse defines model for FoodItemResponse.
type FoodItemResponse struct {
	Carbohydrate   float64                  `json:"carbohydrate"`
	Fat            float64                  `json:"fat"`
	Id             int64                    `json:"id"`
	IsPublic       bool                     `json:"isPublic"`
	KCal           float64                  `json:"kCal"`
	Manufacturer   string                   `json:"manufacturer"`
	Micronutrients *[]MicronutrientResponse `json:"micronutrients,omitempty"`
	OwnerId        int64                    `json:"ownerId"`
	PortionSizes   *[]PortionSizeResponse   `json:"portionSizes,omitempty"`
	Product        string                   `json:"product"`
	Protein        float64                  `json:"protein"`
	Source         string                   `json:"source"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest = WithCredentials

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id    int64  `json:"id"`
	Token string `json:"token"`
}

// MealEntryResponse defines model for MealEntryResponse.
type MealEntryResponse struct {
	Amount     float64 `json:"amount"`
	FoodItemId *int64  `json:"foodItemId,omitempty"`
	Id         int64   `json:"id"`
	RecipeId   *int64  `json:"recipeId,omitempty"`
}

// MealResponse defines model for MealResponse.
type MealResponse struct {
	Entries        []MealEntryResponse `json:"entries"`
	Id             int64               `json:"id"`
	SequenceNumber int64               `json:"sequenceNumber"`
	Timestamp      time.Time           `json:"timestamp"`
}

// MicronutrientResponse defines model for MicronutrientResponse.
type MicronutrientResponse struct {
	Amount float64 `json:"amount"`
	Id     int64   `json:"id"`
	Name   string  `json:"name"`
}

// PortionSizeResponse defines model for PortionSizeResponse.
type PortionSizeResponse struct {
	Amount float64 `json:"amount"`
	Id     int64   `json:"id"`
	Name   string  `json:"name"`
}

// PostFoodItemMicronutrient defines model for PostFoodItemMicronutrient.
type PostFoodItemMicronutrient struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// PostFoodItemPortion defines model for PostFoodItemPortion.
type PostFoodItemPortion struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// PostFoodItemRequest defines model for PostFoodItemRequest.
type PostFoodItemRequest struct {
	Carbohydrate float64  `json:"carbohydrate"`
	Fat          float64  `json:"fat"`
	IsPublic     bool     `json:"isPublic"`
	KCal         *float64 `json:"kCal,omitempty"`
	Manufacturer string   `json:"manufacturer"`
	Product      string   `json:"product"`
	Protein      float64  `json:"protein"`
}

// PostMealEntryRequest defines model for PostMealEntryRequest.
type PostMealEntryRequest struct {
	Amount     float64 `json:"amount"`
	FoodItemId *int64  `json:"foodItemId,omitempty"`
	RecipeId   *int64  `json:"recipeId,omitempty"`
}

// PostMealRequest defines model for PostMealRequest.
type PostMealRequest = WithTimestamp

// PostRecipeEntryRequest defines model for PostRecipeEntryRequest.
type PostRecipeEntryRequest struct {
	Amount     float64 `json:"amount"`
	FoodItemId int64   `json:"foodItemId"`
}

// PostRecipeRequest defines model for PostRecipeRequest.
type PostRecipeRequest struct {
	Entries []PostRecipeEntryRequest `json:"entries"`
	Name    string                   `json:"name"`
}

// RecipeEntryResponse defines model for RecipeEntryResponse.
type RecipeEntryResponse struct {
	Amount     float64 `json:"amount"`
	FoodItemId int64   `json:"foodItemId"`
	Id         int64   `json:"id"`
}

// RecipeResponse defines model for RecipeResponse.
type RecipeResponse struct {
	Entries []RecipeEntryResponse `json:"entries"`
	Id      int64                 `json:"id"`
	Name    string                `json:"name"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest = WithCredentials

// WithAmount defines model for WithAmount.
type WithAmount struct {
	Amount float64 `json:"amount"`
}

// WithCredentials defines model for WithCredentials.
type WithCredentials struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// WithEnergy defines model for WithEnergy.
type WithEnergy struct {
	Carbohydrate float64 `json:"carbohydrate"`
	Fat          float64 `json:"fat"`
	KCal         float64 `json:"kCal"`
	Protein      float64 `json:"protein"`
}

// WithId defines model for WithId.
type WithId struct {
	Id int64 `json:"id"`
}

// WithMacronutrients defines model for WithMacronutrients.
type WithMacronutrients struct {
	Carbohydrate float64 `json:"carbohydrate"`
	Fat          float64 `json:"fat"`
	Protein      float64 `json:"protein"`
}

// WithTimestamp defines model for WithTimestamp.
type WithTimestamp struct {
	Timestamp time.Time `json:"timestamp"`
}

// PostApiFoodItemsJSONBody defines parameters for PostApiFoodItems.
type PostApiFoodItemsJSONBody = PostFoodItemRequest

// PostApiFoodItemsIdMicronutrientsJSONBody defines parameters for PostApiFoodItemsIdMicronutrients.
type PostApiFoodItemsIdMicronutrientsJSONBody = PostFoodItemMicronutrient

// PostApiFoodItemsIdPortionsJSONBody defines parameters for PostApiFoodItemsIdPortions.
type PostApiFoodItemsIdPortionsJSONBody = PostFoodItemPortion

// GetApiMealsParams defines parameters for GetApiMeals.
type GetApiMealsParams struct {
	DateFrom *time.Time `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`
	DateTo   *time.Time `form:"dateTo,omitempty" json:"dateTo,omitempty"`
}

// PostApiFoodItemsJSONRequestBody defines body for PostApiFoodItems for application/json ContentType.
type PostApiFoodItemsJSONRequestBody = PostApiFoodItemsJSONBody

// PostApiFoodItemsIdMicronutrientsJSONRequestBody defines body for PostApiFoodItemsIdMicronutrients for application/json ContentType.
type PostApiFoodItemsIdMicronutrientsJSONRequestBody = PostApiFoodItemsIdMicronutrientsJSONBody

// PostApiFoodItemsIdPortionsJSONRequestBody defines body for PostApiFoodItemsIdPortions for application/json ContentType.
type PostApiFoodItemsIdPortionsJSONRequestBody = PostApiFoodItemsIdPortionsJSONBody

// PostApiLoginJSONRequestBody defines body for PostApiLogin for application/json ContentType.
type PostApiLoginJSONRequestBody = LoginRequest

// PostApiMealsJSONRequestBody defines body for PostApiMeals for application/json ContentType.
type PostApiMealsJSONRequestBody = PostMealRequest

// PostApiMealsIdEntriesJSONRequestBody defines body for PostApiMealsIdEntries for application/json ContentType.
type PostApiMealsIdEntriesJSONRequestBody = PostMealEntryRequest

// PostApiRecipesJSONRequestBody defines body for PostApiRecipes for application/json ContentType.
type PostApiRecipesJSONRequestBody = PostRecipeRequest

// PostApiRegisterJSONRequestBody defines body for PostApiRegister for application/json ContentType.
type PostApiRegisterJSONRequestBody = RegisterRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiFoodItems request
	GetApiFoodItems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFoodItemsWithBody request with any body
	PostApiFoodItemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFoodItems(ctx context.Context, body PostApiFoodItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiFoodItemsId request
	DeleteApiFoodItemsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFoodItemsId request
	GetApiFoodItemsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFoodItemsIdMicronutrientsWithBody request with any body
	PostApiFoodItemsIdMicronutrientsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFoodItemsIdMicronutrients(ctx context.Context, id int64, body PostApiFoodItemsIdMicronutrientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFoodItemsIdPortionsWithBody request with any body
	PostApiFoodItemsIdPortionsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFoodItemsIdPortions(ctx context.Context, id int64, body PostApiFoodItemsIdPortionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiLoginWithBody request with any body
	PostApiLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiLogin(ctx context.Context, body PostApiLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMeals request
	GetApiMeals(ctx context.Context, params *GetApiMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMealsWithBody request with any body
	PostApiMealsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMeals(ctx context.Context, body PostApiMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiMealsId request
	DeleteApiMealsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMealsId request
	GetApiMealsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMealsIdEntriesWithBody request with any body
	PostApiMealsIdEntriesWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMealsIdEntries(ctx context.Context, id int64, body PostApiMealsIdEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiMealsMealIdEntriesEntryId request
	DeleteApiMealsMealIdEntriesEntryId(ctx context.Context, mealId int64, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRecipes request
	GetApiRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRecipesWithBody request with any body
	PostApiRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRecipes(ctx context.Context, body PostApiRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRecipesId request
	DeleteApiRecipesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRegisterWithBody request with any body
	PostApiRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRegister(ctx context.Context, body PostApiRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiFoodItems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFoodItemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItems(ctx context.Context, body PostApiFoodItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiFoodItemsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiFoodItemsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFoodItemsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFoodItemsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItemsIdMicronutrientsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsIdMicronutrientsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItemsIdMicronutrients(ctx context.Context, id int64, body PostApiFoodItemsIdMicronutrientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsIdMicronutrientsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItemsIdPortionsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsIdPortionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFoodItemsIdPortions(ctx context.Context, id int64, body PostApiFoodItemsIdPortionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFoodItemsIdPortionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiLogin(ctx context.Context, body PostApiLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMeals(ctx context.Context, params *GetApiMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMealsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMealsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMealsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeals(ctx context.Context, body PostApiMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMealsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiMealsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiMealsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMealsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMealsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMealsIdEntriesWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMealsIdEntriesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMealsIdEntries(ctx context.Context, id int64, body PostApiMealsIdEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMealsIdEntriesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiMealsMealIdEntriesEntryId(ctx context.Context, mealId int64, entryId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiMealsMealIdEntriesEntryIdRequest(c.Server, mealId, entryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRecipesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRecipesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRecipes(ctx context.Context, body PostApiRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRecipesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRecipesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRecipesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRegister(ctx context.Context, body PostApiRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiFoodItemsRequest generates requests for GetApiFoodItems
func NewGetApiFoodItemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiFoodItemsRequest calls the generic PostApiFoodItems builder with application/json body
func NewPostApiFoodItemsRequest(server string, body PostApiFoodItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFoodItemsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiFoodItemsRequestWithBody generates requests for PostApiFoodItems with any type of body
func NewPostApiFoodItemsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiFoodItemsIdRequest generates requests for DeleteApiFoodItemsId
func NewDeleteApiFoodItemsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFoodItemsIdRequest generates requests for GetApiFoodItemsId
func NewGetApiFoodItemsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiFoodItemsIdMicronutrientsRequest calls the generic PostApiFoodItemsIdMicronutrients builder with application/json body
func NewPostApiFoodItemsIdMicronutrientsRequest(server string, id int64, body PostApiFoodItemsIdMicronutrientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFoodItemsIdMicronutrientsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiFoodItemsIdMicronutrientsRequestWithBody generates requests for PostApiFoodItemsIdMicronutrients with any type of body
func NewPostApiFoodItemsIdMicronutrientsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items/%s/micronutrients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiFoodItemsIdPortionsRequest calls the generic PostApiFoodItemsIdPortions builder with application/json body
func NewPostApiFoodItemsIdPortionsRequest(server string, id int64, body PostApiFoodItemsIdPortionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFoodItemsIdPortionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiFoodItemsIdPortionsRequestWithBody generates requests for PostApiFoodItemsIdPortions with any type of body
func NewPostApiFoodItemsIdPortionsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-items/%s/portions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiLoginRequest calls the generic PostApiLogin builder with application/json body
func NewPostApiLoginRequest(server string, body PostApiLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiLoginRequestWithBody generates requests for PostApiLogin with any type of body
func NewPostApiLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiMealsRequest generates requests for GetApiMeals
func NewGetApiMealsRequest(server string, params *GetApiMealsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMealsRequest calls the generic PostApiMeals builder with application/json body
func NewPostApiMealsRequest(server string, body PostApiMealsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMealsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiMealsRequestWithBody generates requests for PostApiMeals with any type of body
func NewPostApiMealsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiMealsIdRequest generates requests for DeleteApiMealsId
func NewDeleteApiMealsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMealsIdRequest generates requests for GetApiMealsId
func NewGetApiMealsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMealsIdEntriesRequest calls the generic PostApiMealsIdEntries builder with application/json body
func NewPostApiMealsIdEntriesRequest(server string, id int64, body PostApiMealsIdEntriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMealsIdEntriesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiMealsIdEntriesRequestWithBody generates requests for PostApiMealsIdEntries with any type of body
func NewPostApiMealsIdEntriesRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals/%s/entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiMealsMealIdEntriesEntryIdRequest generates requests for DeleteApiMealsMealIdEntriesEntryId
func NewDeleteApiMealsMealIdEntriesEntryIdRequest(server string, mealId int64, entryId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealId", runtime.ParamLocationPath, mealId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/meals/%s/entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRecipesRequest generates requests for GetApiRecipes
func NewGetApiRecipesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRecipesRequest calls the generic PostApiRecipes builder with application/json body
func NewPostApiRecipesRequest(server string, body PostApiRecipesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRecipesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRecipesRequestWithBody generates requests for PostApiRecipes with any type of body
func NewPostApiRecipesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRecipesIdRequest generates requests for DeleteApiRecipesId
func NewDeleteApiRecipesIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRegisterRequest calls the generic PostApiRegister builder with application/json body
func NewPostApiRegisterRequest(server string, body PostApiRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRegisterRequestWithBody generates requests for PostApiRegister with any type of body
func NewPostApiRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiFoodItemsWithResponse request
	GetApiFoodItemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFoodItemsResponse, error)

	// PostApiFoodItemsWithBodyWithResponse request with any body
	PostApiFoodItemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsResponse, error)

	PostApiFoodItemsWithResponse(ctx context.Context, body PostApiFoodItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsResponse, error)

	// DeleteApiFoodItemsIdWithResponse request
	DeleteApiFoodItemsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiFoodItemsIdResponse, error)

	// GetApiFoodItemsIdWithResponse request
	GetApiFoodItemsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetApiFoodItemsIdResponse, error)

	// PostApiFoodItemsIdMicronutrientsWithBodyWithResponse request with any body
	PostApiFoodItemsIdMicronutrientsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdMicronutrientsResponse, error)

	PostApiFoodItemsIdMicronutrientsWithResponse(ctx context.Context, id int64, body PostApiFoodItemsIdMicronutrientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdMicronutrientsResponse, error)

	// PostApiFoodItemsIdPortionsWithBodyWithResponse request with any body
	PostApiFoodItemsIdPortionsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdPortionsResponse, error)

	PostApiFoodItemsIdPortionsWithResponse(ctx context.Context, id int64, body PostApiFoodItemsIdPortionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdPortionsResponse, error)

	// PostApiLoginWithBodyWithResponse request with any body
	PostApiLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error)

	PostApiLoginWithResponse(ctx context.Context, body PostApiLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error)

	// GetApiMealsWithResponse request
	GetApiMealsWithResponse(ctx context.Context, params *GetApiMealsParams, reqEditors ...RequestEditorFn) (*GetApiMealsResponse, error)

	// PostApiMealsWithBodyWithResponse request with any body
	PostApiMealsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMealsResponse, error)

	PostApiMealsWithResponse(ctx context.Context, body PostApiMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMealsResponse, error)

	// DeleteApiMealsIdWithResponse request
	DeleteApiMealsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiMealsIdResponse, error)

	// GetApiMealsIdWithResponse request
	GetApiMealsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetApiMealsIdResponse, error)

	// PostApiMealsIdEntriesWithBodyWithResponse request with any body
	PostApiMealsIdEntriesWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMealsIdEntriesResponse, error)

	PostApiMealsIdEntriesWithResponse(ctx context.Context, id int64, body PostApiMealsIdEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMealsIdEntriesResponse, error)

	// DeleteApiMealsMealIdEntriesEntryIdWithResponse request
	DeleteApiMealsMealIdEntriesEntryIdWithResponse(ctx context.Context, mealId int64, entryId int64, reqEditors ...RequestEditorFn) (*DeleteApiMealsMealIdEntriesEntryIdResponse, error)

	// GetApiRecipesWithResponse request
	GetApiRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRecipesResponse, error)

	// PostApiRecipesWithBodyWithResponse request with any body
	PostApiRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRecipesResponse, error)

	PostApiRecipesWithResponse(ctx context.Context, body PostApiRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRecipesResponse, error)

	// DeleteApiRecipesIdWithResponse request
	DeleteApiRecipesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiRecipesIdResponse, error)

	// PostApiRegisterWithBodyWithResponse request with any body
	PostApiRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRegisterResponse, error)

	PostApiRegisterWithResponse(ctx context.Context, body PostApiRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRegisterResponse, error)
}

type GetApiFoodItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FoodItemResponse
}

// Status returns HTTPResponse.Status
func (r GetApiFoodItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFoodItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFoodItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FoodItemResponse
}

// Status returns HTTPResponse.Status
func (r PostApiFoodItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFoodItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiFoodItemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiFoodItemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiFoodItemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFoodItemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FoodItemResponse
}

// Status returns HTTPResponse.Status
func (r GetApiFoodItemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFoodItemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFoodItemsIdMicronutrientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MicronutrientResponse
}

// Status returns HTTPResponse.Status
func (r PostApiFoodItemsIdMicronutrientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFoodItemsIdMicronutrientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFoodItemsIdPortionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PortionSizeResponse
}

// Status returns HTTPResponse.Status
func (r PostApiFoodItemsIdPortionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFoodItemsIdPortionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
}

// Status returns HTTPResponse.Status
func (r PostApiLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MealResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MealResponse
}

// Status returns HTTPResponse.Status
func (r PostApiMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiMealsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiMealsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiMealsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMealsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MealResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMealsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMealsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMealsIdEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MealEntryResponse
}

// Status returns HTTPResponse.Status
func (r PostApiMealsIdEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMealsIdEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiMealsMealIdEntriesEntryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiMealsMealIdEntriesEntryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiMealsMealIdEntriesEntryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecipeResponse
}

// Status returns HTTPResponse.Status
func (r GetApiRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RecipeResponse
}

// Status returns HTTPResponse.Status
func (r PostApiRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRecipesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRecipesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRecipesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiFoodItemsWithResponse request returning *GetApiFoodItemsResponse
func (c *ClientWithResponses) GetApiFoodItemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFoodItemsResponse, error) {
	rsp, err := c.GetApiFoodItems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFoodItemsResponse(rsp)
}

// PostApiFoodItemsWithBodyWithResponse request with arbitrary body returning *PostApiFoodItemsResponse
func (c *ClientWithResponses) PostApiFoodItemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsResponse, error) {
	rsp, err := c.PostApiFoodItemsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsResponse(rsp)
}

func (c *ClientWithResponses) PostApiFoodItemsWithResponse(ctx context.Context, body PostApiFoodItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsResponse, error) {
	rsp, err := c.PostApiFoodItems(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsResponse(rsp)
}

// DeleteApiFoodItemsIdWithResponse request returning *DeleteApiFoodItemsIdResponse
func (c *ClientWithResponses) DeleteApiFoodItemsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiFoodItemsIdResponse, error) {
	rsp, err := c.DeleteApiFoodItemsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiFoodItemsIdResponse(rsp)
}

// GetApiFoodItemsIdWithResponse request returning *GetApiFoodItemsIdResponse
func (c *ClientWithResponses) GetApiFoodItemsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetApiFoodItemsIdResponse, error) {
	rsp, err := c.GetApiFoodItemsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFoodItemsIdResponse(rsp)
}

// PostApiFoodItemsIdMicronutrientsWithBodyWithResponse request with arbitrary body returning *PostApiFoodItemsIdMicronutrientsResponse
func (c *ClientWithResponses) PostApiFoodItemsIdMicronutrientsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdMicronutrientsResponse, error) {
	rsp, err := c.PostApiFoodItemsIdMicronutrientsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsIdMicronutrientsResponse(rsp)
}

func (c *ClientWithResponses) PostApiFoodItemsIdMicronutrientsWithResponse(ctx context.Context, id int64, body PostApiFoodItemsIdMicronutrientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdMicronutrientsResponse, error) {
	rsp, err := c.PostApiFoodItemsIdMicronutrients(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsIdMicronutrientsResponse(rsp)
}

// PostApiFoodItemsIdPortionsWithBodyWithResponse request with arbitrary body returning *PostApiFoodItemsIdPortionsResponse
func (c *ClientWithResponses) PostApiFoodItemsIdPortionsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdPortionsResponse, error) {
	rsp, err := c.PostApiFoodItemsIdPortionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsIdPortionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiFoodItemsIdPortionsWithResponse(ctx context.Context, id int64, body PostApiFoodItemsIdPortionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFoodItemsIdPortionsResponse, error) {
	rsp, err := c.PostApiFoodItemsIdPortions(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFoodItemsIdPortionsResponse(rsp)
}

// PostApiLoginWithBodyWithResponse request with arbitrary body returning *PostApiLoginResponse
func (c *ClientWithResponses) PostApiLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error) {
	rsp, err := c.PostApiLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiLoginWithResponse(ctx context.Context, body PostApiLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error) {
	rsp, err := c.PostApiLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiLoginResponse(rsp)
}

// GetApiMealsWithResponse request returning *GetApiMealsResponse
func (c *ClientWithResponses) GetApiMealsWithResponse(ctx context.Context, params *GetApiMealsParams, reqEditors ...RequestEditorFn) (*GetApiMealsResponse, error) {
	rsp, err := c.GetApiMeals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMealsResponse(rsp)
}

// PostApiMealsWithBodyWithResponse request with arbitrary body returning *PostApiMealsResponse
func (c *ClientWithResponses) PostApiMealsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMealsResponse, error) {
	rsp, err := c.PostApiMealsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMealsResponse(rsp)
}

func (c *ClientWithResponses) PostApiMealsWithResponse(ctx context.Context, body PostApiMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMealsResponse, error) {
	rsp, err := c.PostApiMeals(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMealsResponse(rsp)
}

// DeleteApiMealsIdWithResponse request returning *DeleteApiMealsIdResponse
func (c *ClientWithResponses) DeleteApiMealsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiMealsIdResponse, error) {
	rsp, err := c.DeleteApiMealsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiMealsIdResponse(rsp)
}

// GetApiMealsIdWithResponse request returning *GetApiMealsIdResponse
func (c *ClientWithResponses) GetApiMealsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetApiMealsIdResponse, error) {
	rsp, err := c.GetApiMealsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMealsIdResponse(rsp)
}

// PostApiMealsIdEntriesWithBodyWithResponse request with arbitrary body returning *PostApiMealsIdEntriesResponse
func (c *ClientWithResponses) PostApiMealsIdEntriesWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMealsIdEntriesResponse, error) {
	rsp, err := c.PostApiMealsIdEntriesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMealsIdEntriesResponse(rsp)
}

func (c *ClientWithResponses) PostApiMealsIdEntriesWithResponse(ctx context.Context, id int64, body PostApiMealsIdEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMealsIdEntriesResponse, error) {
	rsp, err := c.PostApiMealsIdEntries(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMealsIdEntriesResponse(rsp)
}

// DeleteApiMealsMealIdEntriesEntryIdWithResponse request returning *DeleteApiMealsMealIdEntriesEntryIdResponse
func (c *ClientWithResponses) DeleteApiMealsMealIdEntriesEntryIdWithResponse(ctx context.Context, mealId int64, entryId int64, reqEditors ...RequestEditorFn) (*DeleteApiMealsMealIdEntriesEntryIdResponse, error) {
	rsp, err := c.DeleteApiMealsMealIdEntriesEntryId(ctx, mealId, entryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiMealsMealIdEntriesEntryIdResponse(rsp)
}

// GetApiRecipesWithResponse request returning *GetApiRecipesResponse
func (c *ClientWithResponses) GetApiRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRecipesResponse, error) {
	rsp, err := c.GetApiRecipes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRecipesResponse(rsp)
}

// PostApiRecipesWithBodyWithResponse request with arbitrary body returning *PostApiRecipesResponse
func (c *ClientWithResponses) PostApiRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRecipesResponse, error) {
	rsp, err := c.PostApiRecipesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRecipesResponse(rsp)
}

func (c *ClientWithResponses) PostApiRecipesWithResponse(ctx context.Context, body PostApiRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRecipesResponse, error) {
	rsp, err := c.PostApiRecipes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRecipesResponse(rsp)
}

// DeleteApiRecipesIdWithResponse request returning *DeleteApiRecipesIdResponse
func (c *ClientWithResponses) DeleteApiRecipesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteApiRecipesIdResponse, error) {
	rsp, err := c.DeleteApiRecipesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRecipesIdResponse(rsp)
}

// PostApiRegisterWithBodyWithResponse request with arbitrary body returning *PostApiRegisterResponse
func (c *ClientWithResponses) PostApiRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRegisterResponse, error) {
	rsp, err := c.PostApiRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiRegisterWithResponse(ctx context.Context, body PostApiRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRegisterResponse, error) {
	rsp, err := c.PostApiRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRegisterResponse(rsp)
}

// ParseGetApiFoodItemsResponse parses an HTTP response from a GetApiFoodItemsWithResponse call
func ParseGetApiFoodItemsResponse(rsp *http.Response) (*GetApiFoodItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFoodItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FoodItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiFoodItemsResponse parses an HTTP response from a PostApiFoodItemsWithResponse call
func ParsePostApiFoodItemsResponse(rsp *http.Response) (*PostApiFoodItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFoodItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FoodItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiFoodItemsIdResponse parses an HTTP response from a DeleteApiFoodItemsIdWithResponse call
func ParseDeleteApiFoodItemsIdResponse(rsp *http.Response) (*DeleteApiFoodItemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiFoodItemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiFoodItemsIdResponse parses an HTTP response from a GetApiFoodItemsIdWithResponse call
func ParseGetApiFoodItemsIdResponse(rsp *http.Response) (*GetApiFoodItemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFoodItemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FoodItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiFoodItemsIdMicronutrientsResponse parses an HTTP response from a PostApiFoodItemsIdMicronutrientsWithResponse call
func ParsePostApiFoodItemsIdMicronutrientsResponse(rsp *http.Response) (*PostApiFoodItemsIdMicronutrientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFoodItemsIdMicronutrientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MicronutrientResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiFoodItemsIdPortionsResponse parses an HTTP response from a PostApiFoodItemsIdPortionsWithResponse call
func ParsePostApiFoodItemsIdPortionsResponse(rsp *http.Response) (*PostApiFoodItemsIdPortionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFoodItemsIdPortionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PortionSizeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiLoginResponse parses an HTTP response from a PostApiLoginWithResponse call
func ParsePostApiLoginResponse(rsp *http.Response) (*PostApiLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiMealsResponse parses an HTTP response from a GetApiMealsWithResponse call
func ParseGetApiMealsResponse(rsp *http.Response) (*GetApiMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MealResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiMealsResponse parses an HTTP response from a PostApiMealsWithResponse call
func ParsePostApiMealsResponse(rsp *http.Response) (*PostApiMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MealResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiMealsIdResponse parses an HTTP response from a DeleteApiMealsIdWithResponse call
func ParseDeleteApiMealsIdResponse(rsp *http.Response) (*DeleteApiMealsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiMealsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiMealsIdResponse parses an HTTP response from a GetApiMealsIdWithResponse call
func ParseGetApiMealsIdResponse(rsp *http.Response) (*GetApiMealsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMealsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MealResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiMealsIdEntriesResponse parses an HTTP response from a PostApiMealsIdEntriesWithResponse call
func ParsePostApiMealsIdEntriesResponse(rsp *http.Response) (*PostApiMealsIdEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMealsIdEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MealEntryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiMealsMealIdEntriesEntryIdResponse parses an HTTP response from a DeleteApiMealsMealIdEntriesEntryIdWithResponse call
func ParseDeleteApiMealsMealIdEntriesEntryIdResponse(rsp *http.Response) (*DeleteApiMealsMealIdEntriesEntryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiMealsMealIdEntriesEntryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRecipesResponse parses an HTTP response from a GetApiRecipesWithResponse call
func ParseGetApiRecipesResponse(rsp *http.Response) (*GetApiRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecipeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiRecipesResponse parses an HTTP response from a PostApiRecipesWithResponse call
func ParsePostApiRecipesResponse(rsp *http.Response) (*PostApiRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RecipeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiRecipesIdResponse parses an HTTP response from a DeleteApiRecipesIdWithResponse call
func ParseDeleteApiRecipesIdResponse(rsp *http.Response) (*DeleteApiRecipesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRecipesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRegisterResponse parses an HTTP response from a PostApiRegisterWithResponse call
func ParsePostApiRegisterResponse(rsp *http.Response) (*PostApiRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/food-items)
	GetApiFoodItems(w http.ResponseWriter, r *http.Request)

	// (POST /api/food-items)
	PostApiFoodItems(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/food-items/{id})
	DeleteApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /api/food-items/{id})
	GetApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/food-items/{id}/micronutrients)
	PostApiFoodItemsIdMicronutrients(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/food-items/{id}/portions)
	PostApiFoodItemsIdPortions(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/login)
	PostApiLogin(w http.ResponseWriter, r *http.Request)

	// (GET /api/meals)
	GetApiMeals(w http.ResponseWriter, r *http.Request, params GetApiMealsParams)

	// (POST /api/meals)
	PostApiMeals(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/meals/{id})
	DeleteApiMealsId(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /api/meals/{id})
	GetApiMealsId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/meals/{id}/entries)
	PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request, id int64)

	// (DELETE /api/meals/{mealId}/entries/{entryId})
	DeleteApiMealsMealIdEntriesEntryId(w http.ResponseWriter, r *http.Request, mealId int64, entryId int64)

	// (GET /api/recipes)
	GetApiRecipes(w http.ResponseWriter, r *http.Request)

	// (POST /api/recipes)
	PostApiRecipes(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/recipes/{id})
	DeleteApiRecipesId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /api/register)
	PostApiRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiFoodItems operation middleware
func (siw *ServerInterfaceWrapper) GetApiFoodItems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiFoodItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiFoodItems operation middleware
func (siw *ServerInterfaceWrapper) PostApiFoodItems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiFoodItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiFoodItemsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiFoodItemsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiFoodItemsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiFoodItemsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiFoodItemsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiFoodItemsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiFoodItemsIdMicronutrients operation middleware
func (siw *ServerInterfaceWrapper) PostApiFoodItemsIdMicronutrients(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiFoodItemsIdMicronutrients(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiFoodItemsIdPortions operation middleware
func (siw *ServerInterfaceWrapper) PostApiFoodItemsIdPortions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiFoodItemsIdPortions(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiMeals operation middleware
func (siw *ServerInterfaceWrapper) GetApiMeals(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiMealsParams

	// ------------- Optional query parameter "dateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateFrom", r.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateFrom", Err: err})
		return
	}

	// ------------- Optional query parameter "dateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "dateTo", r.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateTo", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiMeals(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiMeals operation middleware
func (siw *ServerInterfaceWrapper) PostApiMeals(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiMeals(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiMealsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiMealsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiMealsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiMealsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiMealsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiMealsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiMealsIdEntries operation middleware
func (siw *ServerInterfaceWrapper) PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiMealsIdEntries(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiMealsMealIdEntriesEntryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiMealsMealIdEntriesEntryId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mealId" -------------
	var mealId int64

	err = runtime.BindStyledParameterWithOptions("simple", "mealId", r.PathValue("mealId"), &mealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mealId", Err: err})
		return
	}

	// ------------- Path parameter "entryId" -------------
	var entryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "entryId", r.PathValue("entryId"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiMealsMealIdEntriesEntryId(w, r, mealId, entryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetApiRecipes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiRecipes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiRecipes operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiRecipesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiRecipesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiRecipesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/food-items", wrapper.GetApiFoodItems)
	m.HandleFunc("POST "+options.BaseURL+"/api/food-items", wrapper.PostApiFoodItems)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/food-items/{id}", wrapper.DeleteApiFoodItemsId)
	m.HandleFunc("GET "+options.BaseURL+"/api/food-items/{id}", wrapper.GetApiFoodItemsId)
	m.HandleFunc("POST "+options.BaseURL+"/api/food-items/{id}/micronutrients", wrapper.PostApiFoodItemsIdMicronutrients)
	m.HandleFunc("POST "+options.BaseURL+"/api/food-items/{id}/portions", wrapper.PostApiFoodItemsIdPortions)
	m.HandleFunc("POST "+options.BaseURL+"/api/login", wrapper.PostApiLogin)
	m.HandleFunc("GET "+options.BaseURL+"/api/meals", wrapper.GetApiMeals)
	m.HandleFunc("POST "+options.BaseURL+"/api/meals", wrapper.PostApiMeals)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/meals/{id}", wrapper.DeleteApiMealsId)
	m.HandleFunc("GET "+options.BaseURL+"/api/meals/{id}", wrapper.GetApiMealsId)
	m.HandleFunc("POST "+options.BaseURL+"/api/meals/{id}/entries", wrapper.PostApiMealsIdEntries)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/meals/{mealId}/entries/{entryId}", wrapper.DeleteApiMealsMealIdEntriesEntryId)
	m.HandleFunc("GET "+options.BaseURL+"/api/recipes", wrapper.GetApiRecipes)
	m.HandleFunc("POST "+options.BaseURL+"/api/recipes", wrapper.PostApiRecipes)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/recipes/{id}", wrapper.DeleteApiRecipesId)
	m.HandleFunc("POST "+options.BaseURL+"/api/register", wrapper.PostApiRegister)

	return m
}

type GetApiFoodItemsRequestObject struct {
}

type GetApiFoodItemsResponseObject interface {
	VisitGetApiFoodItemsResponse(w http.ResponseWriter) error
}

type GetApiFoodItems200JSONResponse []FoodItemResponse

func (response GetApiFoodItems200JSONResponse) VisitGetApiFoodItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFoodItemsRequestObject struct {
	Body *PostApiFoodItemsJSONRequestBody
}

type PostApiFoodItemsResponseObject interface {
	VisitPostApiFoodItemsResponse(w http.ResponseWriter) error
}

type PostApiFoodItems201JSONResponse FoodItemResponse

func (response PostApiFoodItems201JSONResponse) VisitPostApiFoodItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiFoodItemsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteApiFoodItemsIdResponseObject interface {
	VisitDeleteApiFoodItemsIdResponse(w http.ResponseWriter) error
}

type DeleteApiFoodItemsId204Response struct {
}

func (response DeleteApiFoodItemsId204Response) VisitDeleteApiFoodItemsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiFoodItemsId409Response struct {
}

func (response DeleteApiFoodItemsId409Response) VisitDeleteApiFoodItemsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetApiFoodItemsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetApiFoodItemsIdResponseObject interface {
	VisitGetApiFoodItemsIdResponse(w http.ResponseWriter) error
}

type GetApiFoodItemsId200JSONResponse FoodItemResponse

func (response GetApiFoodItemsId200JSONResponse) VisitGetApiFoodItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFoodItemsIdMicronutrientsRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostApiFoodItemsIdMicronutrientsJSONRequestBody
}

type PostApiFoodItemsIdMicronutrientsResponseObject interface {
	VisitPostApiFoodItemsIdMicronutrientsResponse(w http.ResponseWriter) error
}

type PostApiFoodItemsIdMicronutrients201JSONResponse MicronutrientResponse

func (response PostApiFoodItemsIdMicronutrients201JSONResponse) VisitPostApiFoodItemsIdMicronutrientsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFoodItemsIdMicronutrients404Response struct {
}

func (response PostApiFoodItemsIdMicronutrients404Response) VisitPostApiFoodItemsIdMicronutrientsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiFoodItemsIdPortionsRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostApiFoodItemsIdPortionsJSONRequestBody
}

type PostApiFoodItemsIdPortionsResponseObject interface {
	VisitPostApiFoodItemsIdPortionsResponse(w http.ResponseWriter) error
}

type PostApiFoodItemsIdPortions201JSONResponse PortionSizeResponse

func (response PostApiFoodItemsIdPortions201JSONResponse) VisitPostApiFoodItemsIdPortionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFoodItemsIdPortions404Response struct {
}

func (response PostApiFoodItemsIdPortions404Response) VisitPostApiFoodItemsIdPortionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiLoginRequestObject struct {
	Body *PostApiLoginJSONRequestBody
}

type PostApiLoginResponseObject interface {
	VisitPostApiLoginResponse(w http.ResponseWriter) error
}

type PostApiLogin200JSONResponse LoginResponse

func (response PostApiLogin200JSONResponse) VisitPostApiLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMealsRequestObject struct {
	Params GetApiMealsParams
}

type GetApiMealsResponseObject interface {
	VisitGetApiMealsResponse(w http.ResponseWriter) error
}

type GetApiMeals200JSONResponse []MealResponse

func (response GetApiMeals200JSONResponse) VisitGetApiMealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMealsRequestObject struct {
	Body *PostApiMealsJSONRequestBody
}

type PostApiMealsResponseObject interface {
	VisitPostApiMealsResponse(w http.ResponseWriter) error
}

type PostApiMeals201JSONResponse MealResponse

func (response PostApiMeals201JSONResponse) VisitPostApiMealsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiMealsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteApiMealsIdResponseObject interface {
	VisitDeleteApiMealsIdResponse(w http.ResponseWriter) error
}

type DeleteApiMealsId204Response struct {
}

func (response DeleteApiMealsId204Response) VisitDeleteApiMealsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetApiMealsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetApiMealsIdResponseObject interface {
	VisitGetApiMealsIdResponse(w http.ResponseWriter) error
}

type GetApiMealsId200JSONResponse MealResponse

func (response GetApiMealsId200JSONResponse) VisitGetApiMealsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMealsIdEntriesRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostApiMealsIdEntriesJSONRequestBody
}

type PostApiMealsIdEntriesResponseObject interface {
	VisitPostApiMealsIdEntriesResponse(w http.ResponseWriter) error
}

type PostApiMealsIdEntries201JSONResponse MealEntryResponse

func (response PostApiMealsIdEntries201JSONResponse) VisitPostApiMealsIdEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiMealsMealIdEntriesEntryIdRequestObject struct {
	MealId  int64 `json:"mealId"`
	EntryId int64 `json:"entryId"`
}

type DeleteApiMealsMealIdEntriesEntryIdResponseObject interface {
	VisitDeleteApiMealsMealIdEntriesEntryIdResponse(w http.ResponseWriter) error
}

type DeleteApiMealsMealIdEntriesEntryId204Response struct {
}

func (response DeleteApiMealsMealIdEntriesEntryId204Response) VisitDeleteApiMealsMealIdEntriesEntryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetApiRecipesRequestObject struct {
}

type GetApiRecipesResponseObject interface {
	VisitGetApiRecipesResponse(w http.ResponseWriter) error
}

type GetApiRecipes200JSONResponse []RecipeResponse

func (response GetApiRecipes200JSONResponse) VisitGetApiRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiRecipesRequestObject struct {
	Body *PostApiRecipesJSONRequestBody
}

type PostApiRecipesResponseObject interface {
	VisitPostApiRecipesResponse(w http.ResponseWriter) error
}

type PostApiRecipes201JSONResponse RecipeResponse

func (response PostApiRecipes201JSONResponse) VisitPostApiRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiRecipesIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteApiRecipesIdResponseObject interface {
	VisitDeleteApiRecipesIdResponse(w http.ResponseWriter) error
}

type DeleteApiRecipesId204Response struct {
}

func (response DeleteApiRecipesId204Response) VisitDeleteApiRecipesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiRecipesId409Response struct {
}

func (response DeleteApiRecipesId409Response) VisitDeleteApiRecipesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type PostApiRegisterRequestObject struct {
	Body *PostApiRegisterJSONRequestBody
}

type PostApiRegisterResponseObject interface {
	VisitPostApiRegisterResponse(w http.ResponseWriter) error
}

type PostApiRegister201Response struct {
}

func (response PostApiRegister201Response) VisitPostApiRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/food-items)
	GetApiFoodItems(ctx context.Context, request GetApiFoodItemsRequestObject) (GetApiFoodItemsResponseObject, error)

	// (POST /api/food-items)
	PostApiFoodItems(ctx context.Context, request PostApiFoodItemsRequestObject) (PostApiFoodItemsResponseObject, error)

	// (DELETE /api/food-items/{id})
	DeleteApiFoodItemsId(ctx context.Context, request DeleteApiFoodItemsIdRequestObject) (DeleteApiFoodItemsIdResponseObject, error)

	// (GET /api/food-items/{id})
	GetApiFoodItemsId(ctx context.Context, request GetApiFoodItemsIdRequestObject) (GetApiFoodItemsIdResponseObject, error)

	// (POST /api/food-items/{id}/micronutrients)
	PostApiFoodItemsIdMicronutrients(ctx context.Context, request PostApiFoodItemsIdMicronutrientsRequestObject) (PostApiFoodItemsIdMicronutrientsResponseObject, error)

	// (POST /api/food-items/{id}/portions)
	PostApiFoodItemsIdPortions(ctx context.Context, request PostApiFoodItemsIdPortionsRequestObject) (PostApiFoodItemsIdPortionsResponseObject, error)

	// (POST /api/login)
	PostApiLogin(ctx context.Context, request PostApiLoginRequestObject) (PostApiLoginResponseObject, error)

	// (GET /api/meals)
	GetApiMeals(ctx context.Context, request GetApiMealsRequestObject) (GetApiMealsResponseObject, error)

	// (POST /api/meals)
	PostApiMeals(ctx context.Context, request PostApiMealsRequestObject) (PostApiMealsResponseObject, error)

	// (DELETE /api/meals/{id})
	DeleteApiMealsId(ctx context.Context, request DeleteApiMealsIdRequestObject) (DeleteApiMealsIdResponseObject, error)

	// (GET /api/meals/{id})
	GetApiMealsId(ctx context.Context, request GetApiMealsIdRequestObject) (GetApiMealsIdResponseObject, error)

	// (POST /api/meals/{id}/entries)
	PostApiMealsIdEntries(ctx context.Context, request PostApiMealsIdEntriesRequestObject) (PostApiMealsIdEntriesResponseObject, error)

	// (DELETE /api/meals/{mealId}/entries/{entryId})
	DeleteApiMealsMealIdEntriesEntryId(ctx context.Context, request DeleteApiMealsMealIdEntriesEntryIdRequestObject) (DeleteApiMealsMealIdEntriesEntryIdResponseObject, error)

	// (GET /api/recipes)
	GetApiRecipes(ctx context.Context, request GetApiRecipesRequestObject) (GetApiRecipesResponseObject, error)

	// (POST /api/recipes)
	PostApiRecipes(ctx context.Context, request PostApiRecipesRequestObject) (PostApiRecipesResponseObject, error)

	// (DELETE /api/recipes/{id})
	DeleteApiRecipesId(ctx context.Context, request DeleteApiRecipesIdRequestObject) (DeleteApiRecipesIdResponseObject, error)

	// (POST /api/register)
	PostApiRegister(ctx context.Context, request PostApiRegisterRequestObject) (PostApiRegisterResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiFoodItems operation middleware
func (sh *strictHandler) GetApiFoodItems(w http.ResponseWriter, r *http.Request) {
	var request GetApiFoodItemsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFoodItems(ctx, request.(GetApiFoodItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFoodItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiFoodItemsResponseObject); ok {
		if err := validResponse.VisitGetApiFoodItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiFoodItems operation middleware
func (sh *strictHandler) PostApiFoodItems(w http.ResponseWriter, r *http.Request) {
	var request PostApiFoodItemsRequestObject

	var body PostApiFoodItemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiFoodItems(ctx, request.(PostApiFoodItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiFoodItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiFoodItemsResponseObject); ok {
		if err := validResponse.VisitPostApiFoodItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiFoodItemsId operation middleware
func (sh *strictHandler) DeleteApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteApiFoodItemsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiFoodItemsId(ctx, request.(DeleteApiFoodItemsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiFoodItemsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiFoodItemsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiFoodItemsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiFoodItemsId operation middleware
func (sh *strictHandler) GetApiFoodItemsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetApiFoodItemsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFoodItemsId(ctx, request.(GetApiFoodItemsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFoodItemsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiFoodItemsIdResponseObject); ok {
		if err := validResponse.VisitGetApiFoodItemsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiFoodItemsIdMicronutrients operation middleware
func (sh *strictHandler) PostApiFoodItemsIdMicronutrients(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostApiFoodItemsIdMicronutrientsRequestObject

	request.Id = id

	var body PostApiFoodItemsIdMicronutrientsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiFoodItemsIdMicronutrients(ctx, request.(PostApiFoodItemsIdMicronutrientsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiFoodItemsIdMicronutrients")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiFoodItemsIdMicronutrientsResponseObject); ok {
		if err := validResponse.VisitPostApiFoodItemsIdMicronutrientsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiFoodItemsIdPortions operation middleware
func (sh *strictHandler) PostApiFoodItemsIdPortions(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostApiFoodItemsIdPortionsRequestObject

	request.Id = id

	var body PostApiFoodItemsIdPortionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiFoodItemsIdPortions(ctx, request.(PostApiFoodItemsIdPortionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiFoodItemsIdPortions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiFoodItemsIdPortionsResponseObject); ok {
		if err := validResponse.VisitPostApiFoodItemsIdPortionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiLogin operation middleware
func (sh *strictHandler) PostApiLogin(w http.ResponseWriter, r *http.Request) {
	var request PostApiLoginRequestObject

	var body PostApiLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiLogin(ctx, request.(PostApiLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiLoginResponseObject); ok {
		if err := validResponse.VisitPostApiLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMeals operation middleware
func (sh *strictHandler) GetApiMeals(w http.ResponseWriter, r *http.Request, params GetApiMealsParams) {
	var request GetApiMealsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMeals(ctx, request.(GetApiMealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMeals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiMealsResponseObject); ok {
		if err := validResponse.VisitGetApiMealsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiMeals operation middleware
func (sh *strictHandler) PostApiMeals(w http.ResponseWriter, r *http.Request) {
	var request PostApiMealsRequestObject

	var body PostApiMealsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMeals(ctx, request.(PostApiMealsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMeals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiMealsResponseObject); ok {
		if err := validResponse.VisitPostApiMealsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiMealsId operation middleware
func (sh *strictHandler) DeleteApiMealsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteApiMealsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiMealsId(ctx, request.(DeleteApiMealsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiMealsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiMealsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiMealsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMealsId operation middleware
func (sh *strictHandler) GetApiMealsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetApiMealsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMealsId(ctx, request.(GetApiMealsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMealsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiMealsIdResponseObject); ok {
		if err := validResponse.VisitGetApiMealsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiMealsIdEntries operation middleware
func (sh *strictHandler) PostApiMealsIdEntries(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostApiMealsIdEntriesRequestObject

	request.Id = id

	var body PostApiMealsIdEntriesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMealsIdEntries(ctx, request.(PostApiMealsIdEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMealsIdEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiMealsIdEntriesResponseObject); ok {
		if err := validResponse.VisitPostApiMealsIdEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiMealsMealIdEntriesEntryId operation middleware
func (sh *strictHandler) DeleteApiMealsMealIdEntriesEntryId(w http.ResponseWriter, r *http.Request, mealId int64, entryId int64) {
	var request DeleteApiMealsMealIdEntriesEntryIdRequestObject

	request.MealId = mealId
	request.EntryId = entryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiMealsMealIdEntriesEntryId(ctx, request.(DeleteApiMealsMealIdEntriesEntryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiMealsMealIdEntriesEntryId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiMealsMealIdEntriesEntryIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiMealsMealIdEntriesEntryIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiRecipes operation middleware
func (sh *strictHandler) GetApiRecipes(w http.ResponseWriter, r *http.Request) {
	var request GetApiRecipesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiRecipes(ctx, request.(GetApiRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiRecipesResponseObject); ok {
		if err := validResponse.VisitGetApiRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiRecipes operation middleware
func (sh *strictHandler) PostApiRecipes(w http.ResponseWriter, r *http.Request) {
	var request PostApiRecipesRequestObject

	var body PostApiRecipesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiRecipes(ctx, request.(PostApiRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiRecipesResponseObject); ok {
		if err := validResponse.VisitPostApiRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiRecipesId operation middleware
func (sh *strictHandler) DeleteApiRecipesId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteApiRecipesIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiRecipesId(ctx, request.(DeleteApiRecipesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiRecipesId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiRecipesIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiRecipesIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiRegister operation middleware
func (sh *strictHandler) PostApiRegister(w http.ResponseWriter, r *http.Request) {
	var request PostApiRegisterRequestObject

	var body PostApiRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiRegister(ctx, request.(PostApiRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiRegisterResponseObject); ok {
		if err := validResponse.VisitPostApiRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
