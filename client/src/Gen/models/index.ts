/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FoodItemResponse}
 */
// @ts-ignore
export function createFoodItemResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFoodItemResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginRequest}
 */
// @ts-ignore
export function createLoginRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginResponse}
 */
// @ts-ignore
export function createLoginResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MealEntryResponse}
 */
// @ts-ignore
export function createMealEntryResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMealEntryResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MealResponse}
 */
// @ts-ignore
export function createMealResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMealResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostFoodItemRequest}
 */
// @ts-ignore
export function createPostFoodItemRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostFoodItemRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostMealEntryRequest}
 */
// @ts-ignore
export function createPostMealEntryRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostMealEntryRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostMealRequest}
 */
// @ts-ignore
export function createPostMealRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostMealRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostRecipeEntryRequest}
 */
// @ts-ignore
export function createPostRecipeEntryRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostRecipeEntryRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PostRecipeRequest}
 */
// @ts-ignore
export function createPostRecipeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPostRecipeRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecipeEntryResponse}
 */
// @ts-ignore
export function createRecipeEntryResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecipeEntryResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecipeResponse}
 */
// @ts-ignore
export function createRecipeResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecipeResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterRequest}
 */
// @ts-ignore
export function createRegisterRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAmount}
 */
// @ts-ignore
export function createWithAmountFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAmount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCredentials}
 */
// @ts-ignore
export function createWithCredentialsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCredentials;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithId}
 */
// @ts-ignore
export function createWithIdFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithId;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFoodItemResponse(foodItemResponse: Partial<FoodItemResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "carbohydrate": n => { foodItemResponse.carbohydrate = n.getNumberValue(); },
        "fat": n => { foodItemResponse.fat = n.getNumberValue(); },
        "id": n => { foodItemResponse.id = n.getNumberValue(); },
        "kCal": n => { foodItemResponse.kCal = n.getNumberValue(); },
        "manufacturer": n => { foodItemResponse.manufacturer = n.getStringValue(); },
        "product": n => { foodItemResponse.product = n.getStringValue(); },
        "protein": n => { foodItemResponse.protein = n.getNumberValue(); },
        "public": n => { foodItemResponse.public = n.getBooleanValue(); },
        "source": n => { foodItemResponse.source = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginRequest(loginRequest: Partial<LoginRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWithCredentials(loginRequest),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginResponse(loginResponse: Partial<LoginResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "token": n => { loginResponse.token = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMealEntryResponse(mealEntryResponse: Partial<MealEntryResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { mealEntryResponse.amount = n.getNumberValue(); },
        "foodItemId": n => { mealEntryResponse.foodItemId = n.getNumberValue(); },
        "id": n => { mealEntryResponse.id = n.getNumberValue(); },
        "recipeId": n => { mealEntryResponse.recipeId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMealResponse(mealResponse: Partial<MealResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "entries": n => { mealResponse.entries = n.getCollectionOfObjectValues<MealEntryResponse>(createMealEntryResponseFromDiscriminatorValue); },
        "id": n => { mealResponse.id = n.getNumberValue(); },
        "sequenceNumber": n => { mealResponse.sequenceNumber = n.getNumberValue(); },
        "timestamp": n => { mealResponse.timestamp = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostFoodItemRequest(postFoodItemRequest: Partial<PostFoodItemRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "carbohydrate": n => { postFoodItemRequest.carbohydrate = n.getNumberValue(); },
        "fat": n => { postFoodItemRequest.fat = n.getNumberValue(); },
        "id": n => { postFoodItemRequest.id = n.getNumberValue(); },
        "kCal": n => { postFoodItemRequest.kCal = n.getNumberValue(); },
        "manufacturer": n => { postFoodItemRequest.manufacturer = n.getStringValue(); },
        "product": n => { postFoodItemRequest.product = n.getStringValue(); },
        "protein": n => { postFoodItemRequest.protein = n.getNumberValue(); },
        "public": n => { postFoodItemRequest.public = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostMealEntryRequest(postMealEntryRequest: Partial<PostMealEntryRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWithAmount(postMealEntryRequest),
        "foodItemId": n => { postMealEntryRequest.foodItemId = n.getNumberValue(); },
        "recipeId": n => { postMealEntryRequest.recipeId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostMealRequest(postMealRequest: Partial<PostMealRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "timestamp": n => { postMealRequest.timestamp = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostRecipeEntryRequest(postRecipeEntryRequest: Partial<PostRecipeEntryRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWithAmount(postRecipeEntryRequest),
        "foodItemId": n => { postRecipeEntryRequest.foodItemId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPostRecipeRequest(postRecipeRequest: Partial<PostRecipeRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "entries": n => { postRecipeRequest.entries = n.getCollectionOfObjectValues<PostRecipeEntryRequest>(createPostRecipeEntryRequestFromDiscriminatorValue); },
        "name": n => { postRecipeRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecipeEntryResponse(recipeEntryResponse: Partial<RecipeEntryResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { recipeEntryResponse.amount = n.getNumberValue(); },
        "foodItemId": n => { recipeEntryResponse.foodItemId = n.getNumberValue(); },
        "id": n => { recipeEntryResponse.id = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecipeResponse(recipeResponse: Partial<RecipeResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWithId(recipeResponse),
        "entries": n => { recipeResponse.entries = n.getCollectionOfObjectValues<RecipeEntryResponse>(createRecipeEntryResponseFromDiscriminatorValue); },
        "name": n => { recipeResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterRequest(registerRequest: Partial<RegisterRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { registerRequest.email = n.getStringValue(); },
        "password": n => { registerRequest.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAmount(withAmount: Partial<WithAmount> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { withAmount.amount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCredentials(withCredentials: Partial<WithCredentials> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { withCredentials.email = n.getStringValue(); },
        "password": n => { withCredentials.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithId(withId: Partial<WithId> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { withId.id = n.getNumberValue(); },
    }
}
export interface FoodItemResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The carbohydrate property
     */
    carbohydrate?: number | null;
    /**
     * The fat property
     */
    fat?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The kCal property
     */
    kCal?: number | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The product property
     */
    product?: string | null;
    /**
     * The protein property
     */
    protein?: number | null;
    /**
     * The public property
     */
    public?: boolean | null;
    /**
     * The source property
     */
    source?: string | null;
}
export interface LoginRequest extends Parsable, WithCredentials {
}
export interface LoginResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The token property
     */
    token?: string | null;
}
export interface MealEntryResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The foodItemId property
     */
    foodItemId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The recipeId property
     */
    recipeId?: number | null;
}
export interface MealResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The entries property
     */
    entries?: MealEntryResponse[] | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The sequenceNumber property
     */
    sequenceNumber?: number | null;
    /**
     * The timestamp property
     */
    timestamp?: Date | null;
}
export interface PostFoodItemRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The carbohydrate property
     */
    carbohydrate?: number | null;
    /**
     * The fat property
     */
    fat?: number | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The kCal property
     */
    kCal?: number | null;
    /**
     * The manufacturer property
     */
    manufacturer?: string | null;
    /**
     * The product property
     */
    product?: string | null;
    /**
     * The protein property
     */
    protein?: number | null;
    /**
     * The public property
     */
    public?: boolean | null;
}
export interface PostMealEntryRequest extends Parsable, WithAmount {
    /**
     * The foodItemId property
     */
    foodItemId?: number | null;
    /**
     * The recipeId property
     */
    recipeId?: number | null;
}
export interface PostMealRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The timestamp property
     */
    timestamp?: Date | null;
}
export interface PostRecipeEntryRequest extends Parsable, WithAmount {
    /**
     * The foodItemId property
     */
    foodItemId?: number | null;
}
export interface PostRecipeRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The entries property
     */
    entries?: PostRecipeEntryRequest[] | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface RecipeEntryResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The foodItemId property
     */
    foodItemId?: number | null;
    /**
     * The id property
     */
    id?: number | null;
}
export interface RecipeResponse extends Parsable, WithId {
    /**
     * The entries property
     */
    entries?: RecipeEntryResponse[] | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface RegisterRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFoodItemResponse(writer: SerializationWriter, foodItemResponse: Partial<FoodItemResponse> | undefined | null = {}) : void {
    if (foodItemResponse) {
        writer.writeNumberValue("carbohydrate", foodItemResponse.carbohydrate);
        writer.writeNumberValue("fat", foodItemResponse.fat);
        writer.writeNumberValue("id", foodItemResponse.id);
        writer.writeNumberValue("kCal", foodItemResponse.kCal);
        writer.writeStringValue("manufacturer", foodItemResponse.manufacturer);
        writer.writeStringValue("product", foodItemResponse.product);
        writer.writeNumberValue("protein", foodItemResponse.protein);
        writer.writeBooleanValue("public", foodItemResponse.public);
        writer.writeStringValue("source", foodItemResponse.source);
        writer.writeAdditionalData(foodItemResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginRequest(writer: SerializationWriter, loginRequest: Partial<LoginRequest> | undefined | null = {}) : void {
    if (loginRequest) {
        serializeWithCredentials(writer, loginRequest)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginResponse(writer: SerializationWriter, loginResponse: Partial<LoginResponse> | undefined | null = {}) : void {
    if (loginResponse) {
        writer.writeStringValue("token", loginResponse.token);
        writer.writeAdditionalData(loginResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMealEntryResponse(writer: SerializationWriter, mealEntryResponse: Partial<MealEntryResponse> | undefined | null = {}) : void {
    if (mealEntryResponse) {
        writer.writeNumberValue("amount", mealEntryResponse.amount);
        writer.writeNumberValue("foodItemId", mealEntryResponse.foodItemId);
        writer.writeNumberValue("id", mealEntryResponse.id);
        writer.writeNumberValue("recipeId", mealEntryResponse.recipeId);
        writer.writeAdditionalData(mealEntryResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMealResponse(writer: SerializationWriter, mealResponse: Partial<MealResponse> | undefined | null = {}) : void {
    if (mealResponse) {
        writer.writeCollectionOfObjectValues<MealEntryResponse>("entries", mealResponse.entries, serializeMealEntryResponse);
        writer.writeNumberValue("id", mealResponse.id);
        writer.writeNumberValue("sequenceNumber", mealResponse.sequenceNumber);
        writer.writeDateValue("timestamp", mealResponse.timestamp);
        writer.writeAdditionalData(mealResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostFoodItemRequest(writer: SerializationWriter, postFoodItemRequest: Partial<PostFoodItemRequest> | undefined | null = {}) : void {
    if (postFoodItemRequest) {
        writer.writeNumberValue("carbohydrate", postFoodItemRequest.carbohydrate);
        writer.writeNumberValue("fat", postFoodItemRequest.fat);
        writer.writeNumberValue("id", postFoodItemRequest.id);
        writer.writeNumberValue("kCal", postFoodItemRequest.kCal);
        writer.writeStringValue("manufacturer", postFoodItemRequest.manufacturer);
        writer.writeStringValue("product", postFoodItemRequest.product);
        writer.writeNumberValue("protein", postFoodItemRequest.protein);
        writer.writeBooleanValue("public", postFoodItemRequest.public);
        writer.writeAdditionalData(postFoodItemRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostMealEntryRequest(writer: SerializationWriter, postMealEntryRequest: Partial<PostMealEntryRequest> | undefined | null = {}) : void {
    if (postMealEntryRequest) {
        serializeWithAmount(writer, postMealEntryRequest)
        writer.writeNumberValue("foodItemId", postMealEntryRequest.foodItemId);
        writer.writeNumberValue("recipeId", postMealEntryRequest.recipeId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostMealRequest(writer: SerializationWriter, postMealRequest: Partial<PostMealRequest> | undefined | null = {}) : void {
    if (postMealRequest) {
        writer.writeDateValue("timestamp", postMealRequest.timestamp);
        writer.writeAdditionalData(postMealRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostRecipeEntryRequest(writer: SerializationWriter, postRecipeEntryRequest: Partial<PostRecipeEntryRequest> | undefined | null = {}) : void {
    if (postRecipeEntryRequest) {
        serializeWithAmount(writer, postRecipeEntryRequest)
        writer.writeNumberValue("foodItemId", postRecipeEntryRequest.foodItemId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePostRecipeRequest(writer: SerializationWriter, postRecipeRequest: Partial<PostRecipeRequest> | undefined | null = {}) : void {
    if (postRecipeRequest) {
        writer.writeCollectionOfObjectValues<PostRecipeEntryRequest>("entries", postRecipeRequest.entries, serializePostRecipeEntryRequest);
        writer.writeStringValue("name", postRecipeRequest.name);
        writer.writeAdditionalData(postRecipeRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecipeEntryResponse(writer: SerializationWriter, recipeEntryResponse: Partial<RecipeEntryResponse> | undefined | null = {}) : void {
    if (recipeEntryResponse) {
        writer.writeNumberValue("amount", recipeEntryResponse.amount);
        writer.writeNumberValue("foodItemId", recipeEntryResponse.foodItemId);
        writer.writeNumberValue("id", recipeEntryResponse.id);
        writer.writeAdditionalData(recipeEntryResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecipeResponse(writer: SerializationWriter, recipeResponse: Partial<RecipeResponse> | undefined | null = {}) : void {
    if (recipeResponse) {
        serializeWithId(writer, recipeResponse)
        writer.writeCollectionOfObjectValues<RecipeEntryResponse>("entries", recipeResponse.entries, serializeRecipeEntryResponse);
        writer.writeStringValue("name", recipeResponse.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterRequest(writer: SerializationWriter, registerRequest: Partial<RegisterRequest> | undefined | null = {}) : void {
    if (registerRequest) {
        writer.writeStringValue("email", registerRequest.email);
        writer.writeStringValue("password", registerRequest.password);
        writer.writeAdditionalData(registerRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAmount(writer: SerializationWriter, withAmount: Partial<WithAmount> | undefined | null = {}) : void {
    if (withAmount) {
        writer.writeNumberValue("amount", withAmount.amount);
        writer.writeAdditionalData(withAmount.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCredentials(writer: SerializationWriter, withCredentials: Partial<WithCredentials> | undefined | null = {}) : void {
    if (withCredentials) {
        writer.writeStringValue("email", withCredentials.email);
        writer.writeStringValue("password", withCredentials.password);
        writer.writeAdditionalData(withCredentials.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithId(writer: SerializationWriter, withId: Partial<WithId> | undefined | null = {}) : void {
    if (withId) {
        writer.writeNumberValue("id", withId.id);
        writer.writeAdditionalData(withId.additionalData);
    }
}
export interface WithAmount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
}
export interface WithCredentials extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface WithId extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: number | null;
}
/* tslint:enable */
/* eslint-enable */
