/* tslint:disable */
/* eslint-disable */
/**
 * Nutrition Tracker API
 * API Specification for Nutrition Tracker
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { MealEntryResponse, MealResponse, PostMealEntryRequest, PostMealRequest } from "../models/index";
import {
    MealEntryResponseFromJSON,
    MealEntryResponseToJSON,
    MealResponseFromJSON,
    MealResponseToJSON,
    PostMealEntryRequestFromJSON,
    PostMealEntryRequestToJSON,
    PostMealRequestFromJSON,
    PostMealRequestToJSON,
} from "../models/index";

export interface ApiMealsGetRequest {
    dateFrom?: Date;
    dateTo?: Date;
}

export interface ApiMealsIdDeleteRequest {
    id: number;
}

export interface ApiMealsIdEntriesPostRequest {
    id: number;
    postMealEntryRequest?: PostMealEntryRequest;
}

export interface ApiMealsIdGetRequest {
    id: number;
}

export interface ApiMealsMealIdEntriesEntryIdDeleteRequest {
    mealId: number;
    entryId: number;
}

export interface ApiMealsPostRequest {
    postMealRequest?: PostMealRequest;
}

/**
 * MealsApi - interface
 *
 * @export
 * @interface MealsApiInterface
 */
export interface MealsApiInterface {
    /**
     *
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsGetRaw(
        requestParameters: ApiMealsGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<MealResponse>>>;

    /**
     */
    apiMealsGet(
        requestParameters: ApiMealsGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<MealResponse>>;

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsIdDeleteRaw(
        requestParameters: ApiMealsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiMealsIdDelete(
        requestParameters: ApiMealsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @param {number} id
     * @param {PostMealEntryRequest} [postMealEntryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsIdEntriesPostRaw(
        requestParameters: ApiMealsIdEntriesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealEntryResponse>>;

    /**
     */
    apiMealsIdEntriesPost(
        requestParameters: ApiMealsIdEntriesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealEntryResponse>;

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsIdGetRaw(
        requestParameters: ApiMealsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealResponse>>;

    /**
     */
    apiMealsIdGet(
        requestParameters: ApiMealsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealResponse>;

    /**
     *
     * @param {number} mealId
     * @param {number} entryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsMealIdEntriesEntryIdDeleteRaw(
        requestParameters: ApiMealsMealIdEntriesEntryIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiMealsMealIdEntriesEntryIdDelete(
        requestParameters: ApiMealsMealIdEntriesEntryIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @param {PostMealRequest} [postMealRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApiInterface
     */
    apiMealsPostRaw(
        requestParameters: ApiMealsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealResponse>>;

    /**
     */
    apiMealsPost(
        requestParameters: ApiMealsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealResponse>;
}

/**
 *
 */
export class MealsApi extends runtime.BaseAPI implements MealsApiInterface {
    /**
     */
    async apiMealsGetRaw(
        requestParameters: ApiMealsGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<MealResponse>>> {
        const queryParameters: any = {};

        if (requestParameters["dateFrom"] != null) {
            queryParameters["dateFrom"] = (requestParameters["dateFrom"] as any).toISOString();
        }

        if (requestParameters["dateTo"] != null) {
            queryParameters["dateTo"] = (requestParameters["dateTo"] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/meals`;

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MealResponseFromJSON));
    }

    /**
     */
    async apiMealsGet(
        requestParameters: ApiMealsGetRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<MealResponse>> {
        const response = await this.apiMealsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealsIdDeleteRaw(
        requestParameters: ApiMealsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiMealsIdDelete().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/meals/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealsIdDelete(
        requestParameters: ApiMealsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.apiMealsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealsIdEntriesPostRaw(
        requestParameters: ApiMealsIdEntriesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealEntryResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiMealsIdEntriesPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/meals/{id}/entries`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PostMealEntryRequestToJSON(requestParameters["postMealEntryRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MealEntryResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMealsIdEntriesPost(
        requestParameters: ApiMealsIdEntriesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealEntryResponse> {
        const response = await this.apiMealsIdEntriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealsIdGetRaw(
        requestParameters: ApiMealsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiMealsIdGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/meals/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MealResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMealsIdGet(
        requestParameters: ApiMealsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealResponse> {
        const response = await this.apiMealsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealsMealIdEntriesEntryIdDeleteRaw(
        requestParameters: ApiMealsMealIdEntriesEntryIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["mealId"] == null) {
            throw new runtime.RequiredError(
                "mealId",
                'Required parameter "mealId" was null or undefined when calling apiMealsMealIdEntriesEntryIdDelete().',
            );
        }

        if (requestParameters["entryId"] == null) {
            throw new runtime.RequiredError(
                "entryId",
                'Required parameter "entryId" was null or undefined when calling apiMealsMealIdEntriesEntryIdDelete().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/meals/{mealId}/entries/{entryId}`;
        urlPath = urlPath.replace(`{${"mealId"}}`, encodeURIComponent(String(requestParameters["mealId"])));
        urlPath = urlPath.replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters["entryId"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealsMealIdEntriesEntryIdDelete(
        requestParameters: ApiMealsMealIdEntriesEntryIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.apiMealsMealIdEntriesEntryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealsPostRaw(
        requestParameters: ApiMealsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MealResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/meals`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PostMealRequestToJSON(requestParameters["postMealRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MealResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMealsPost(
        requestParameters: ApiMealsPostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MealResponse> {
        const response = await this.apiMealsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
