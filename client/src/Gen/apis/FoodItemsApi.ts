/* tslint:disable */
/* eslint-disable */
/**
 * Nutrition Tracker API
 * API Specification for Nutrition Tracker
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    FoodItemResponse,
    MicronutrientResponse,
    PortionSizeResponse,
    PostFoodItemMicronutrient,
    PostFoodItemPortion,
    PostFoodItemRequest,
} from "../models/index";
import {
    FoodItemResponseFromJSON,
    FoodItemResponseToJSON,
    MicronutrientResponseFromJSON,
    MicronutrientResponseToJSON,
    PortionSizeResponseFromJSON,
    PortionSizeResponseToJSON,
    PostFoodItemMicronutrientFromJSON,
    PostFoodItemMicronutrientToJSON,
    PostFoodItemPortionFromJSON,
    PostFoodItemPortionToJSON,
    PostFoodItemRequestFromJSON,
    PostFoodItemRequestToJSON,
} from "../models/index";

export interface ApiFoodItemsIdDeleteRequest {
    id: number;
}

export interface ApiFoodItemsIdGetRequest {
    id: number;
}

export interface ApiFoodItemsIdMicronutrientsPostRequest {
    id: number;
    postFoodItemMicronutrient?: PostFoodItemMicronutrient;
}

export interface ApiFoodItemsIdPortionsPostRequest {
    id: number;
    postFoodItemPortion?: PostFoodItemPortion;
}

export interface ApiFoodItemsPostRequest {
    postFoodItemRequest?: PostFoodItemRequest;
}

/**
 * FoodItemsApi - interface
 *
 * @export
 * @interface FoodItemsApiInterface
 */
export interface FoodItemsApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<FoodItemResponse>>>;

    /**
     */
    apiFoodItemsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FoodItemResponse>>;

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsIdDeleteRaw(
        requestParameters: ApiFoodItemsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiFoodItemsIdDelete(
        requestParameters: ApiFoodItemsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsIdGetRaw(
        requestParameters: ApiFoodItemsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FoodItemResponse>>;

    /**
     */
    apiFoodItemsIdGet(
        requestParameters: ApiFoodItemsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FoodItemResponse>;

    /**
     *
     * @param {number} id
     * @param {PostFoodItemMicronutrient} [postFoodItemMicronutrient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsIdMicronutrientsPostRaw(
        requestParameters: ApiFoodItemsIdMicronutrientsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MicronutrientResponse>>;

    /**
     */
    apiFoodItemsIdMicronutrientsPost(
        requestParameters: ApiFoodItemsIdMicronutrientsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MicronutrientResponse>;

    /**
     *
     * @param {number} id
     * @param {PostFoodItemPortion} [postFoodItemPortion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsIdPortionsPostRaw(
        requestParameters: ApiFoodItemsIdPortionsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PortionSizeResponse>>;

    /**
     */
    apiFoodItemsIdPortionsPost(
        requestParameters: ApiFoodItemsIdPortionsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PortionSizeResponse>;

    /**
     *
     * @param {PostFoodItemRequest} [postFoodItemRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodItemsApiInterface
     */
    apiFoodItemsPostRaw(
        requestParameters: ApiFoodItemsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FoodItemResponse>>;

    /**
     */
    apiFoodItemsPost(
        requestParameters: ApiFoodItemsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FoodItemResponse>;
}

/**
 *
 */
export class FoodItemsApi extends runtime.BaseAPI implements FoodItemsApiInterface {
    /**
     */
    async apiFoodItemsGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<FoodItemResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/food-items`;

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FoodItemResponseFromJSON));
    }

    /**
     */
    async apiFoodItemsGet(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<FoodItemResponse>> {
        const response = await this.apiFoodItemsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodItemsIdDeleteRaw(
        requestParameters: ApiFoodItemsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiFoodItemsIdDelete().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/food-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiFoodItemsIdDelete(
        requestParameters: ApiFoodItemsIdDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.apiFoodItemsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiFoodItemsIdGetRaw(
        requestParameters: ApiFoodItemsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FoodItemResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiFoodItemsIdGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/food-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodItemsIdGet(
        requestParameters: ApiFoodItemsIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FoodItemResponse> {
        const response = await this.apiFoodItemsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodItemsIdMicronutrientsPostRaw(
        requestParameters: ApiFoodItemsIdMicronutrientsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<MicronutrientResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiFoodItemsIdMicronutrientsPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/food-items/{id}/micronutrients`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PostFoodItemMicronutrientToJSON(requestParameters["postFoodItemMicronutrient"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MicronutrientResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodItemsIdMicronutrientsPost(
        requestParameters: ApiFoodItemsIdMicronutrientsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<MicronutrientResponse> {
        const response = await this.apiFoodItemsIdMicronutrientsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodItemsIdPortionsPostRaw(
        requestParameters: ApiFoodItemsIdPortionsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PortionSizeResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling apiFoodItemsIdPortionsPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/food-items/{id}/portions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PostFoodItemPortionToJSON(requestParameters["postFoodItemPortion"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => PortionSizeResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodItemsIdPortionsPost(
        requestParameters: ApiFoodItemsIdPortionsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PortionSizeResponse> {
        const response = await this.apiFoodItemsIdPortionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodItemsPostRaw(
        requestParameters: ApiFoodItemsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FoodItemResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/food-items`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: PostFoodItemRequestToJSON(requestParameters["postFoodItemRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodItemsPost(
        requestParameters: ApiFoodItemsPostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FoodItemResponse> {
        const response = await this.apiFoodItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
